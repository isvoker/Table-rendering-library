const libraryRenderingForm = (function () {
	"use strict";

	let tableContainer;

	function loadRows(options) {
		Sensei.xhr({
			data: options.controllerParams,

			onBeforeSend: () => {
				Sensei.blockIt(tableContainer);
			},
			onComplete: () => {
				Sensei.unblockIt(tableContainer);
			},
			onSuccess: (data) => {
				checkBtnLoadMore(data, options);
				addRowsToTable(data.rows, options);
			},
		});
	}

	function checkBtnLoadMore(data, options) {
		if (!options.paramsForCreatTabl.btnLoadMore) {
			return;
		}

		const tablContainer = options.paramsForCreatTabl.container;
		const btnLoadMore = tablContainer.querySelector(".load-more-btn");

		if (data.show_btn) {
			Sensei.show(btnLoadMore);
		} else {
			Sensei.hide(btnLoadMore);
		}
	}

	function clearTable(tableContainer) {
		tableContainer.innerText = "";
	}

	function setField(options) {
		createTablContainer(options);
		addHeaderToTable(options);
	}

	function createTablContainer(options) {
		const table = options.container;

		let header_html = `<div class="styled-table__shell"></div>`,
			btnLoad;

		let body_html = `
		<div class="styled-table__rows proposals_table">
			<div class="styled-table__placeholder">Тут пока нет ни одной записи</div>
		</div>`;

		if (options.btnLoadMore) {
			btnLoad = `
			<div class="flex jc-c">
				<a class="load-more-btn hidden-el js__more_rows" data-page="1" href="#">Загрузить больше</a>
			</div>`;
		} else {
			btnLoad = "";
		}

		table.innerHTML += header_html + body_html + btnLoad;
		tableContainer = table.querySelector(`.proposals_table`);

	}

	function addHeaderToTable(options) {
		const setFields = options.fields;
		const tablContainer = options.container;
		const headerContainer = tablContainer.querySelector(".styled-table__shell");

		let header_html = `<div class="styled-table__heading container flex ai-c">`;

		setFields.forEach(function (field) {
			header_html += `<div class="styled-table__heading_item" style="width:${field.width}">${field.title}</div>`;
		});
		headerContainer.innerHTML = header_html + `</div>`;
	}

	function addRowsToTable(rows, options) {
		const optionsForCreatBody = options.paramsForCreatTabl;
		const tablContainer = options.paramsForCreatTabl.container;
		const tableBody = tablContainer.querySelector(".proposals_table");

		if (options.paramsForCreatTabl.clearTable){
			clearTable(tableBody);
		}

		let tableRow = "",
			tableСell,
			rowContainer_html;

		const setFields = optionsForCreatBody.fields;

		rows.forEach(function (row) {
			rowContainer_html = optionsForCreatBody.rowContainer(row);

			setFields.forEach(function (field) {
				tableСell = `<div class="styled-table__cell" style='width:${field.width}'>`;

				if (field.hasOwnProperty("append")) {
					tableСell += field.append(row);
				} else {
					tableСell += row[field.field];
				}
				tableСell += "</div>";

				tableRow += tableСell;
			});
			tableBody.innerHTML += rowContainer_html + tableRow + "</div>";
			tableRow = "";
		});
	}

	return {
		loadRows: loadRows,
		setField: setField,
		createTablContainer: createTablContainer,
	};
})();
