const libraryRenderingForm = (function () {
	"use strict";

	let tableBody,
	container;
	const tableBodyPlaceholder = 'Тут пока нет ни одной записи';

	const loadRows = (options) => {
		const xhr = {
			data: options.controllerParams,

			onBeforeSend: () => {
				Sensei.blockIt(tableBody);
			},
			onComplete: () => {
				Sensei.unblockIt(tableBody);
			},
			onSuccess: (data) => {
				checkBtnLoadMore(data, options);
				addRowsToTable(data.rows, options);

				if(options.paramsForCreatTabl.hasOwnProperty('loadAfter')){
					options.paramsForCreatTabl.loadAfter();
				}
			},
		};
		Sensei.xhr(xhr);
	}

	function checkBtnLoadMore(data, options) {

		if(options.paramsForCreatTabl.hasOwnProperty('checkBtnLoadAll') && data.thereMoreEntries){
			const btn = document.getElementById('proposal-log__load-all');
			Sensei.hide(btn);
		}

		if (!options.paramsForCreatTabl.btnLoadMore) {
			return;
		}
		const tablContainer = options.paramsForCreatTabl.container;
		const btnLoadMore = tablContainer.querySelector(".load-more-btn");

		if (data.thereMoreEntries) {
			Sensei.hide(btnLoadMore);
		} else {
			Sensei.show(btnLoadMore);
		}

		btnLoadMore.addEventListener('click', (event) => {
			Sensei.ignoreEvent(event);

			options.controllerParams.page++;
			options.paramsForCreatTabl.clearTable = false;
			loadRows(options);
		});
	}

	function clearTable(tableBody) {
		tableBody.innerText = "";
	}

	function createStaticPartOfTable(options) {
		container = options.container;
		fillTableContainer(options);
		addHeaderToTable(options);
	}

	function fillTableContainer(options) {
		let header_html = '<div class="styled-table__shell ta-c"></div>',
			btnLoad;

		let body_html = `<div class="styled-table__rows proposals_table">
			<div class="styled-table__placeholder">${tableBodyPlaceholder}</div>
		</div>`;

		if (options.btnLoadMore) {
			btnLoad = `<div class="flex jc-c ">
				<a class="load-more-btn hidden-el js__more_rows" data-page="1" href="#">Загрузить больше</a>
			</div>`;
		} else {
			btnLoad = "";
		}

		container.innerHTML += header_html + body_html + btnLoad;
		tableBody = container.querySelector(`.proposals_table`);

	}

	function addHeaderToTable(options) {
		const cellsCollection = options.cellsCollection;
		const headerContainer = container.querySelector(".styled-table__shell");

		let header_html = '<div class="styled-table__heading container flex ai-c">';

		cellsCollection.forEach(function (cell) {
			header_html += `<div class="styled-table__heading_item" style="width:${cell.width}">${cell.title}</div>`;
		});
		headerContainer.innerHTML = header_html + '</div>';
	}

	function addRowsToTable(rows, options) {
		const optionsForCreatBody = options.paramsForCreatTabl;
		const tableContainer = optionsForCreatBody.container;
		const tableBody = tableContainer.querySelector(".proposals_table");

		if (optionsForCreatBody.clearTable) {
			clearTable(tableBody);
			if (rows.length < 1) {
				tableBody.innerHTML = `<div class="styled-table__placeholder">${tableBodyPlaceholder}</div>`
			}
		}

		let tableRow = "",
			tableCell,
			rowContainer_html;

		const cellsCollection = optionsForCreatBody.cellsCollection;
		rows.forEach(function (row) {
			rowContainer_html = optionsForCreatBody.rowContainer(row);

			cellsCollection.forEach(function (cell) {

				tableCell = `<div class="styled-table__cell " style='width:${cell.width}'>`;

				if (cell.hasOwnProperty("append")) {
					tableCell += cell.append(row);
				} else {
					tableCell += row[cell.field];
				}
				tableCell += "</div>";

				tableRow += tableCell;
			});
			tableBody.innerHTML += rowContainer_html + tableRow + "</div>";
			tableRow = "";
		});
	}

	return {
		loadRows: loadRows,
		createStaticPartOfTable: createStaticPartOfTable,
	};
})();
